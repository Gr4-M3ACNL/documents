---
config:
  theme: neo-dark
title: Package m3acnl
---

classDiagram
direction TB
    class JsonManager{
        - fichierNiveau : String
        - nomFichierProfils : String
        - nomFichierPartie : String
        + GrilleInfo : record[int,Double[][]]
        + JsonManager()
        + getGrilleInfo(difficulte : Difficulte, index : int) : GrilleInfo
        + getNbGrilles(difficulte Difficulte) : int
        + getListeDifficulte() : List[String]
        - getListeProfils() : List[String]
        - sauvegarderProfil(profile : Profile) : void
        - chargerProfile(nom : String) : Profile
        - supprimerProfil(nom : String) : void
        - sauvegarderPartie(partie : Partie, nomProfil : String) : void
        - chargerPartie(nomProfil : String, difficulte : Difficulte) : JsonNode
        - supprimerPartie(nomProfil : String, difficulte : Difficulte) : void
    }

    class OsManager{
        - instance : OsManager
        - osType : OsType
        + osType : Enum
        - OsManager()
        + getInstance() : OsManager
        + getOsType() : OsType
    }

    class ProfileManager{
        - jsonManager : JsonManager
        - instance : ProfileManager
        - profileActif : Profile
        - ProfileManager()
        + getInstance() : ProfileManager
        + getProfileActif() : Profile
        + setProfileActif(profile : String) : void
        + desactiverProfileActif() : void
        + listeProfils() : List[String]
        + sauvegarder() : void
        + supprimerProfil(nom : String) : void
        + supprimerProfil(profile : Profile) : void
        + creerProfil(nom : String) : void
    }

    class SauvegardeManager{
        - instance : SauvegardeManager
        - repertoireSauvegarde : Path
        - SauvegardeManager()
        - getInstance() : SauvegardeManager
        - getRepertoireSauvegarde() : Path
        - setSaveDir() : void
        - initialiseRepertoire() : void
    }

    class SauvegardePartieManager{
        - jsonManager : JsonManager
        - instance : SauvegardePartieManager
        + JeuEnCour : record[long,Jeu]
        - SauvegardePartieManager()
        + getInstance() : SauvegardePartieManager
        + sauvegarde(partie : partie) : void
        + charger(difficulte : Difficulte) : JeuEnCour
        + supprimer(difficulte : Difficulte) : void
    }

    

    class GenererAsset {
	    - background : BackgroundImage
        - backAlerte : String
	    + GenererAsset(background : String)
        + creerMenuQuitter(primaryStage : Stage, mainScene : Scene) : Scene
        + creerMenuAide(primaryStage : Stage, mainScene : Scene, partie : Partie) : Scene
        + creerMenuAide(primaryStage : Stage, mainScene : Scene) : Scene
        + showConfirmQuitPage(primaryStage : Stage, confirmQuitScene : Scene) : void
        + showAidePage(primaryStage : Stage, aideScene : Scene) : void
        + showSettingsMenu(primaryStage : Stage, settingsScene : Scene) : void
        + alerteProfile() : void
        + demandeSortie(event : WindowEvent) : void
        + relancerPartie() : void
        + creerSlideshox(primaryStage : Stage , mainScene : Scene) : Scene
        + creerButonStyle(text : String) : Button
        + creerLabelStyle(text : String) : Label
        + createBackground(backgroundPath String) : Background
        + creerImageView(path : String, hauteur : double , largeur : double) : ImageView
        + jouerSon(fichierAudio : String , volume : double) : void
    }

    class PartieAffichage {
	    - partie : Partie
        - labelTemps : Label
        - boutons : Button[][]
        - gridPane : GridPane
        - SUPERPOSITION_RATIO : double
        - backgroundPane : StackPane
        - derniereTaille : double
        - timeline : Timeline
        - ajoue : boolean
        - niveauAide : int
        - elementAide : ElementAide
        - numeroAide : int
        - aideVoisin : AideVoisin
        - genererMenu : GenererAsset
        - primaryStage : Stage
        - mainScene : Scene 
        + PartieAffichage(difficulte : Difficulte)
        + *@override* start(prim : Stage) : void
        - creerBackground() : void
        - creerPanneauDeControle() : VBox
        - initialiserBoutons() : void
        - creerPanneauAide() : VBox
        - actualiserAffichage() : void
        - actualiserLabelTemps() : void
        - ajusterTailleImages() : void
        - previsualiserEtat(event : MouseEvent, x : int, y : int) : void
        - restaurerEtat(x : int, y : int) : void
        - ajusterTailleBoutons(boutons : Button[][]) : void
        - victoire() : void
        - afficherOverlayVictoire() : void
        - cacherOverlay(mainLayout : BorderPane) : void
        - actualiserAideLabel() : void
        - surbrillanceAide() : void
        - getResourceElementJeu(i : int, j : int) : String
        - activerAide() : void
        - activerElement(event : MouseEvent, x : int, y : int) : void
        - trouverNoeudLePlusProche(doubleLien : DoubleLien, event : MouseEvent) : Noeud
        - pause() : void
        - demarrerChrono() : void
        - relancerPartie(mainLayout : BorderPane) : void
        - retour() : void
        - avancer() : void
        - check() : void
        - sauvegarde() : void
        - retourSauvegarde() : void
    }

    

    class Coord {
	    - CoordX : int
	    - coordY : int
	    + Coord(px : int, py : int)
	    + compareTo(co2 : Coord) : int
	    + *@Override* toString() : String
    }

    class DoubleLien {
	    - lien1 : Lien
	    - lien2 : Lien
	    - interrupteur : Boolean
	    - lienBrillance : int
	    - modifie : Boolean
	    + DoubleLien(l1 : Lien, l2 : Lien)
	    + *@Override* modifie() : Boolean
	    + *@Override* verifie() : void
	    + *@Override* averifie() : void
	    + *@Override* activer() : Boolean
	    + *@Override* activer(n : Noeud) : Boolean
	    + *@Override* surbrillanceOn() : void
	    + *@Override* surbrillanceOff() : void
	    + *@Override* draw() : String
	    + *@Override* drawTerm() : void
	    + *@Override* toString() : String
    }

    class ElementJeu {
        + modifie() : Boolean
        + activer() : Boolean
        + verifie() : void
        + averifie() : void
        + surbrillanceOn() : void
        + surbrillanceOff() : void
        + draw() : String
        + drawTerm() : void
    }

    class Lien{
        - jeu : Jeu
        - noeud1 : Noeud
        - noeud2 : Noeud
        - nbLien : int
        - nbLienSoluce : int
        - surbrillance : Boolean
        - orientation : int
        - index : int
        - modifie : Boolean
        - cmptVerif : int
        - cmptVerifMax : int
        - listeDl : ArrayList[DoubleLien]
        + Lien(n1 : Noeud,n2 : Noeud,sol : int,j : Jeu,orient : int)
        + retourArriere() : void
        + noeudDansLien(n : Noeud) : int
        + remiseAzero() : void
        + *@Override* modifie() : Boolean
	    + *@Override* verifie() : void
	    + *@Override* averifie() : void
	    + *@Override* activer() : Boolean
        + *@Override* surbrillanceOn() : void
	    + *@Override* surbrillanceOff() : void
	    + *@Override* draw() : String
	    + *@Override* drawTerm() : void
	    + *@Override* toString() : String
    }
    

    class Noeud{
        - position : Coord
        - degreSoluce : int
        - degreActuelle : int
        - listeAdjacence : ArrayList[Noeud]
        - surbrillance : Boolean
        - activer : Boolean
        - modifie : Boolean
        + Noeud(x : int, y : int, degS : int)
        + ajouterDegre() : void
        + suppressionDegre() : void
        + diminuerDegre() : void
        + ajouterNoeudAdjacence(n : Noeud) : void
        + retirerNoeudAdjacence(n : Noeud) : void
        + afficherReseau() : ArrayList[Noeud]
        - afficherReseauRecursif(noeud : Noeud, visites : ArrayList[Noeud]) : void
        + *@Override* modifie() : Boolean
	    + *@Override* verifie() : void
	    + *@Override* averifie() : void
	    + *@Override* activer() : Boolean
        + *@Override* surbrillanceOn() : void
	    + *@Override* surbrillanceOff() : void
        + *@Override* compareTo(n2 : Noeud) : int
	    + *@Override* draw() : String
	    + *@Override* drawTerm() : void
	    + *@Override* toString() : String


    }
	<<Interface>> ElementJeu
    

    class Matrice{
        - matrice : ArrayList[ArrayList[ElementJeu]]
        - matrice2 : ArrayList[ArrayList[Double]]
        - listeLien : ArrayList[Lien]
        + Matrice(lignes : int, cols : int, mat : Double[][],jeu : Jeu)
        + setElement(ligne : int, col : int, element : ElementJeu) : void
        - horiz(val : double) : double
        - vertic(val : double) : double
        - genMatrice(jeu : Jeu) : void
        - genLink(jeu : Jeu) : void
        - verifHorizontal(y : int, x : int, jeu : Jeu) : void
        - verifVerticale(y : int, x : int, jeu : Jeu) : void
        + validationMatrice() : Boolean
        + remiseAzero() : void
        + liensValide() : Boolean
        + trouverNoeudLePlusProche(x : int, y : int) : Noeud
        + setSurbrillanceOff() : void
        + drawTerm() : void

    }
    
    class Pile{
        - tab : ArrayList[Lien]
        + Pile()
        + taille() : int
        + estVide() : Boolean
        + sommet() : Lien
        + setTab(ArrayList[Lien]) : void
        + empiler(o : Lien) : void
        + depiler() : Lien
        + vidange() : void
        + copieTab() : ArrayList[Lien]
        + *@Override* serialize(gen : JsonGenerator,serializers : SerializerProvider ) : void
        + *@Override* serializeWithType(gen : JsonGenerator ,serializers: SerializerProvider , typeSer : TypeSerializer ) : void
        + *@Override* toString() : String
    }
    
    class Jeu{
        + plateau : Matrice
        + instantDebut : Instant
        + tempsFinal : long
        + coupsJouer : Pile
        + coupsJouerBuff : Pile
        + taille : int
        + sauvegardeAutomatique : ArrayList[Lien]
        + pointDeSauvegarde : ArrayList[Lien]
        + Jeu(taille : int, mat : Double[][])
        + copieJeu() : Jeu
        + verificationHorizontal(noeud1 : Noeud, noeud2 : Noeud, nbLien : int, aide : Boolean) : int
        + verificationVertical(noeud1 : Noeud, noeud2 : Noeud, nbLien : int, aide : Boolean) : int
        - sauvegardeAuto() : void
        + sauvegardeManuellement() : void
        - activeElm(x : int, y : int, n : Noeud) : Lien
        + activeElmJeu(x : int, y : int, n : Noeud) : void
        + activeElmAide(x : int, y : int, n : Noeud) : Lien
        + retour() : void
        + avancer() : void
        + stopChrono() : void
        + reprendreChrono() : void
        + chargerSauvegarde(sauvegarde : ArrayList[Lien]) : void
        + chargerSauvegardeAuto() : void
        + chargerSauvegardeManuel() : void
        + rejouer(index : int) : void
        + drawJeuTerm() : void
    }
    
    
    class Difficulte{
        facile
        moyen
        difficile
        expert
    }
    class Partie{
        - jeu : Jeu
        - chrono : Instant
        - difficulte : Difficulte
        - pause : Boolean
        + Partie(difficulte : Difficulte)
        + stopChrono() : void
        + startChrono() : void
        + addMalus(malusEnMillisecondes : long) : void
        + sauvegarde() : void
        + finPartie() : void
        + *@Override* serialize(gen : JsonGenerator,serializers : SerializerProvider ) : void
        + *@Override* serializeWithType(gen : JsonGenerator ,serializers: SerializerProvider , typeSer : TypeSerializer ) : void
    }

    

    <<Enum>> Difficulte
    

    class Profile{
        - pseudo : String
        - parametre : ParametreProfile
        - historiquePartieProfile : HistoriquePartieProfile
        + Profile(pseudo : String)
        + *@Override* serialize(gen : JsonGenerator,serializers : SerializerProvider ) : void
        + *@Override* serializeWithType(gen : JsonGenerator ,serializers: SerializerProvider , typeSer : TypeSerializer ) : void
    }

    class ParametreProfile{
        - niveauAide : int
        - volumeEffetsSonore : float
        - effetVisuel : Boolean
        - ParametreProfile()
        + getNiveauAide() : int
        + getVolumeEffetsSonore() : float
        - getEffetVisuel() : Boolean
        + setNiveauAide(niveauAide : int) : void
        + setVolumeEffetSonore(voluùeEffetsSonore : flaot) : void
        - setEffetVisuel(effetVisuel : Boolean) : void
        + *@Override* serialize(gen : JsonGenerator,serializers : SerializerProvider ) : void
        + *@Override* serializeWithType(gen : JsonGenerator ,serializers: SerializerProvider , typeSer : TypeSerializer ) : void
    }

    class HistoriquePartieProfile{
        - tailleHistorique : int
        - facile : list[Duration]
        - moyen : list[Duration]
        - difficile : list[Duration]
        - expert : list[Duration]
        - indexFacile : int
        - indexMoyen : int
        - indexDifficile : int
        - indexExpert : int
        - HistoriquePartieProfile()
        + getFacile() : list[Duration]
        + getMoyen() : list[Duration]
        + getDifficile() : list[Duration]
        + getExpert() : list[Duration]
        + getIndexFacile() : int
        + getIndexMoyen() : int
        + getIndexDifficile() : int
        + getIndexExpert() : int
        + getTemps(difficulte : Difficulte) : list[Duration]
        + getIndex(difficulte : Difficulte) : int
        + getNbPartieDifficulte(difficulte : Difficulte) : int
        - setFacile(facile : List[String]) : void
        - setMoyen(moyen : List[String]) : void
        - setDifficile(difficile : List[String]) : void
        - setExpert(expert : List[String]) : void
        - setIndexFacile(indexFacile : int) : void
        - setIndexMoyen(indexMoyen : int) : void
        - setIndexDifficile(indexDifficile : int) : void
        - setIndexExpert(indexExpert : int) : void
        - ajouterTemps(difficulte : Difficulte, temps : Duration) : void
        + *@Override* serialize(gen : JsonGenerator,serializers : SerializerProvider ) : void
        + *@Override* serializeWithType(gen : JsonGenerator ,serializers: SerializerProvider , typeSer : TypeSerializer ) : void
    
    }

     class HashiParmentier{
        - primaryStage : Stage
        - mainScene : Scene
        - selectionNiveau : Scene
        - quitterAppli : Scene
        - selectionProfile : Scene
        - genererMenu : GenererAsset
        + HashiParmentier()
        + *@Override* start(primaryStage : Stage)
        - creerSelectionProfil(background : BackgroundImage) : void
        - creerSelectionNiveau(background : BackgroundImage) : void
        - showProfileSelectionPage() : void
        - creerProfile() : void
        - supprimerProfile() : void
        - loadProfile() : void
        - startGame() : void
        - startGame() : void
        + lancerPartieAffichage(difficulte : Difficulte) : void

    }
    class ElementAide {
	    - texte : List[String]
	    - noeudsSurbrillance : List[Noeud][]
	    + ElementAide()
	    + addText(i : int, texte : String) : void
	    + addNoeud(index : int, n : Noeud) : void
	    + getTexte() : List[String]
	    + getNoeudsSurbrillance() : List[Noeud][]
    }
    class AideVoisin {
	    - jeu : Jeu
	    - aidesVoisins : List[AideVoisin]
	    - zones : Map[String, List[Noeud]]
	    + AideVoisin(matrice : Matrice, description : String, nom : String,jeu : Jeu, c : Coord)
	    + getListeNoeud() : List[Noeud]
	    - estValide(x : int, y : int) : boolean
	    + trouverVoisin(noeud : Noeud) : List[Noeud]
	    + trouverVoisinsDispo(noeud : Noeud) : List[Noeud]
	    - ajouterVoisin(voisins : List[Noeud], x : int, y : int, dx : int, dy: int) : void
	    + poidsRestantVoisins(noeud : Noeud)
	    - conseil(noeud : Noeud) : String
	    - checkLier(elem : ElementJeu, n : Noeud) : boolean
	    - checkIsolement(noeud : Noeud) : boolean
	    + checkzone() : void
	    + trouverVoisinsDispoComplet(n : Noeud) : List[Noeud]
	    + aideGlobale() : ElementAide
	    + *@Override* afficherAide(index : int) : void
    }
    class Aide {
	    # nom : String
	    # description : String
	    # cout : int
	    # matrice : Matrice
	    # coord : Coord
	    + Aide(matrice : Matrice, nom : String, c : Coord)
	    + afficherAide(index : int) : void
    }

	<<Abstraite>> Aide

    AideVoisin --|> Aide
    AideVoisin --* ElementAide


    HashiParmentier <-- GenererAsset
    PartieAffichage <-- Partie
    Profile <-- ParametreProfile
    Profile <-- HistoriquePartieProfile
    SauvegardePartieManager <-- JsonManager
    ProfileManager <-- JsonManager
    PartieAffichage <-- ElementAide
    PartieAffichage <-- AideVoisin
    PartieAffichage <-- GenererAsset
    PartieAffichage <-- AideVoisin
    Lien <-- DoubleLien
    Lien <|-- ElementJeu
    Noeud <|-- ElementJeu
    Lien <-- Noeud
    DoubleLien <-- Lien
    Noeud <-- Coord
    Matrice <-- ElementJeu
    Matrice <-- Lien
    Matrice <-- Noeud
    Pile <-- Lien
    Jeu <-- Matrice
    Jeu <-- Pile
    Jeu <-- Lien
    Partie <-- Difficulte
    

