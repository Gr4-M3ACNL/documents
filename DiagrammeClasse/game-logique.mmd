classDiagram
direction TB
    class Matrice{
        - matrice : ArrayList[ArrayList[ElementJeu]]
        - matrice2 : ArrayList[ArrayList[Double]]
        - listeLien : ArrayList[Lien]
        + Matrice(lignes : int, cols : int, mat : Double[][],jeu : Jeu)
        + setElement(ligne : int, col : int, element : ElementJeu) : void
        - horiz(val : double) : double
        - vertic(val : double) : double
        - genMatrice(jeu : Jeu) : void
        - genLink(jeu : Jeu) : void
        - verifHorizontal(y : int, x : int, jeu : Jeu) : void
        - verifVerticale(y : int, x : int, jeu : Jeu) : void
        + validationMatrice() : Boolean
        + remiseAzero() : void
        + liensValide() : Boolean
        + trouverNoeudLePlusProche(x : int, y : int) : Noeud
        + setSurbrillanceOff() : void
        + drawTerm() : void

    }
    class Pile{
        - tab : ArrayList[Lien]
        + Pile()
        + taille() : int
        + estVide() : Boolean
        + sommet() : Lien
        + setTab(ArrayList[Lien]) : void
        + empiler(o : Lien) : void
        + depiler() : Lien
        + vidange() : void
        + copieTab() : ArrayList[Lien]
        + *@Override* serialize(gen : JsonGenerator,serializers : SerializerProvider ) : void
        + *@Override* serializeWithType(gen : JsonGenerator ,serializers: SerializerProvider , typeSer : TypeSerializer ) : void
        + *@Override* toString() : String
    }
    class Jeu{
        + plateau : Matrice
        + instantDebut : Instant
        + tempsFinal : long
        + coupsJouer : Pile
        + coupsJouerBuff : Pile
        + taille : int
        + sauvegardeAutomatique : ArrayList[Lien]
        + pointDeSauvegarde : ArrayList[Lien]
        + Jeu(taille : int, mat : Double[][])
        + copieJeu() : Jeu
        + verificationHorizontal(noeud1 : Noeud, noeud2 : Noeud, nbLien : int, aide : Boolean) : int
        + verificationVertical(noeud1 : Noeud, noeud2 : Noeud, nbLien : int, aide : Boolean) : int
        - sauvegardeAuto() : void
        + sauvegardeManuellement() : void
        - activeElm(x : int, y : int, n : Noeud) : Lien
        + activeElmJeu(x : int, y : int, n : Noeud) : void
        + activeElmAide(x : int, y : int, n : Noeud) : Lien
        + retour() : void
        + avancer() : void
        + stopChrono() : void
        + reprendreChrono() : void
        + chargerSauvegarde(sauvegarde : ArrayList[Lien]) : void
        + chargerSauvegardeAuto() : void
        + chargerSauvegardeManuel() : void
        + rejouer(index : int) : void
        + drawJeuTerm() : void
    }
    Jeu <-- Matrice
    Jeu <-- Pile

